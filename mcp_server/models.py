# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:47:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel, conint, constr


class BootCount(RootModel[int]):
    root: int = Field(
        ...,
        description='Is increased with 1 when the service starts. Is never cleared (unless the database is adjusted).',
        examples=[22],
    )


class CodeHex(RootModel[str]):
    root: str = Field(
        ...,
        description='String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (> 40 bytes!) that a decimal representation would be useless to generate.',
        examples=['deadbeef'],
    )


class Config(BaseModel):
    pass


class ConfigRequest(BaseModel):
    pass


class Custom(RootModel[Optional[Any]]):
    root: Optional[Any] = Field(
        None,
        description='The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...',
        examples=[{'foo': 'bar'}],
    )


class EventTopicAction(Enum):
    created = 'created'
    updated = 'updated'
    deleted = 'deleted'
    disappeared = 'disappeared'
    connection_rssi_changed = 'connection-rssi-changed'


class EventTopicArgument(RootModel[Any]):
    root: Any = Field(
        ...,
        description='Extra arguments may be added to a topic string, it depends on the `resource_type` and the `action` what extra arguments are added.',
        examples=[{'foo': 'bar'}],
    )


class EventTopicResourceType(Enum):
    blobs = 'blobs'
    items = 'items'
    keys = 'keys'
    kvpairs = 'kvpairs'
    locations = 'locations'
    presences = 'presences'
    services = 'services'
    spots = 'spots'
    subscriptions = 'subscriptions'
    users = 'users'


class Id(RootModel[str]):
    root: str = Field(
        ...,
        description='Unique identifier for resource.',
        examples=['5b7d6cbd7503c445552a1664'],
    )


class IdReadOnly(RootModel[str]):
    root: str = Field(
        ...,
        description='Unique identifier for resource.',
        examples=['5b7d6cbd7503c445552a1664'],
    )


class IsOnline(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether or not this resource is actively connected to the Brain.',
        examples=[True],
    )


class Item2(BaseModel):
    location_id: Optional[IdReadOnly] = None


class ItemProtocol(Enum):
    altbeacon = 'altbeacon'
    uniwear = 'uniwear'
    nfc = 'nfc'
    generic = 'generic'
    eddystone = 'eddystone'
    epcgen2 = 'epcgen2'
    ibeacon = 'ibeacon'
    nanoble = 'nanoble'


class ItemType(Enum):
    barcode = 'barcode'
    bluetitan = 'bluetitan'
    gbtag = 'gbtag'
    relay = 'relay'
    smarttag = 'smarttag'
    tag = 'tag'


class KeyValuePairUpdate(BaseModel):
    kv_value: Optional[Any] = Field(
        None, description='The value of the key value pair.', examples=['all the bars']
    )


class Label(RootModel[str]):
    root: str = Field(
        ...,
        description='A name or a label for this resource. This is used in the user interface, may be empty.',
        examples=['Foo Bar'],
    )


class ListOfItemIds(RootModel[List[IdReadOnly]]):
    root: List[IdReadOnly] = Field(..., description='List of item ids')


class ListOfSetIds(RootModel[List[IdReadOnly]]):
    root: List[IdReadOnly] = Field(..., description='List of set ids')


class LocationRequest(RootModel[str]):
    root: str = Field(
        ...,
        description='Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.',
        examples=['5b7d6cbd7503c445552a1664'],
    )


class Conditions1(BaseModel):
    from_location_id: Optional[IdReadOnly] = None


class Conditions4(BaseModel):
    to_location_id: Optional[IdReadOnly] = None


class LocationRuleParameters(BaseModel):
    pass


class LocationRuleType(Enum):
    allow = 'allow'
    disallow = 'disallow'
    disappeared = 'disappeared'
    debounce = 'debounce'


class Conditions6(BaseModel):
    from_location: Optional[Id] = None
    to_location: Optional[Id] = None


class Metadata(BaseModel):
    pass


class MoveCount(RootModel[int]):
    root: int = Field(
        ...,
        description="How many times this item moved since it's created on this server. Note that it is likely that not all moved events are available in the events (they are deleted after a configurable number of time). This field is never decreases. It gives a good indication of the usage of this item.",
        examples=[4523],
    )


class Name(RootModel[str]):
    root: str = Field(
        ..., description='Human readable name for the resource.', examples=['Foo Bar']
    )


class Proximity(Enum):
    far = 'far'
    near = 'near'
    immediate = 'immediate'


class RequestCounter(RootModel[int]):
    root: int = Field(
        ...,
        description='The total number of HTTP requests that this resource has done.',
        examples=[73807],
    )


class ResponseListResource(BaseModel):
    status: Optional[int] = Field(None, description='Status code', examples=[200])
    total: Optional[int] = Field(
        None, description='Total items in the list', examples=[2]
    )


class RestartRequest(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Set this to `true` to send a reset request for the specific resource.',
        examples=[True],
    )


class RuleEnabled(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether this rule should be in effect (`true`) or on hold (`false`).',
        examples=[True],
    )


class Senses(BaseModel):
    pass


class SensesRequest(BaseModel):
    pass


class SerialNumber(RootModel[int]):
    root: int = Field(
        ...,
        description="This is the fixed and unique spot number. It's assigned during the production process and used to identify an individual device during its lifetime.",
        examples=[1337],
    )


class SpotGet2(BaseModel):
    report_location_id: Optional[IdReadOnly] = None


class Type(Enum):
    any = 'any'


class SpotSetTypeAny(BaseModel):
    type: Optional[Type] = Field(
        None,
        description='Spot set type `any`; A wildcard that matches all type of items',
    )


class Type1(Enum):
    areacode = 'areacode'


class SpotSetTypeAreacode(BaseModel):
    area_code: Optional[conint(ge=1)] = Field(None, description='Area Code')
    type: Optional[Type1] = Field(
        None,
        description='Spot set type `areacode`; Matches Item with the same Area Code as specified by this set',
    )


class Type2(Enum):
    codelength = 'codelength'


class SpotSetTypeCodelength(BaseModel):
    length_bits: Optional[conint(ge=1)] = Field(
        None, description='The length of the item code in bits'
    )
    type: Optional[Type2] = Field(
        None,
        description='Spot set type `codelength`; Matches all Item codes that have the exact same length in bits as specified by this value',
    )


class Type3(Enum):
    codemask = 'codemask'


class SpotSetTypeCodemask(BaseModel):
    code: Optional[constr(min_length=2, max_length=84)] = Field(
        None, description='Item code'
    )
    mask: Optional[constr(min_length=2, max_length=84)] = Field(
        None, description='Mask which part of the code should match.'
    )
    type: Optional[Type3] = Field(
        None,
        description='Spot set type `codemask`; Matches all Items that return true as a result of using the following equation ((Item.code & Item.mask) == (Set.code & Set.mask)).',
    )


class Type4(Enum):
    coderange = 'coderange'


class SpotSetTypeCoderange(BaseModel):
    end: Optional[constr(min_length=2, max_length=84)] = Field(
        None, description='End of the code range'
    )
    start: Optional[constr(min_length=2, max_length=84)] = Field(
        None, description='Start of the code range'
    )
    type: Optional[Type4] = Field(
        None,
        description='Spot set type `coderange`; Matches all Items codes if within specified range as specified by this set',
    )


class Operator(Enum):
    gt = 'gt'
    gte = 'gte'
    eq = 'eq'
    in_ = 'in'
    ne = 'ne'
    lt = 'lt'
    lte = 'lte'
    starts = 'starts'
    ends = 'ends'


class Type5(Enum):
    extended = 'extended'


class SpotSetTypeExtended(BaseModel):
    key: Optional[constr(min_length=1, max_length=32)] = Field(
        None, description='Extended data property key'
    )
    operator: Optional[Operator] = Field(None, description='Operator')
    type: Optional[Type5] = Field(
        None,
        description='Spot set type `extended`; Items that have the extended property (key) and match the requirement for value using the specified operator, as specified by this set',
    )
    value: Optional[
        Union[str, constr(min_length=1, max_length=100), float, int, bool]
    ] = Field(None, description='Extended data property value.')


class Restrictions(BaseModel):
    allow_server_edit: Optional[bool] = Field(
        None, description='Server can change this set.'
    )
    allow_spot_edit: Optional[bool] = Field(
        None,
        description='Spots can change set, differences from the brain server will be merged with the device',
    )


class Type6(Enum):
    list = 'list'


class SpotSetTypeList(BaseModel):
    itemlist_id: Optional[Id] = None
    limit: Optional[conint(ge=1, le=2000)] = Field(
        None, description='Number, list limit, default `1000` if not specified.'
    )
    mutation: Optional[str] = Field(
        None,
        description='Last mutation that was synchronized to the device. This is used for internal synchronization between the device and the server.',
    )
    restrictions: Optional[Restrictions] = Field(
        None, description='Restrict changes spot and brain.'
    )
    sha1: Optional[str] = Field(
        None,
        description='The sha1 checksum of the list. This will change when the list is mutated.',
    )
    total: Optional[int] = Field(
        None, description='Total amount of items in this set', examples=[2]
    )
    type: Optional[Type6] = Field(
        None,
        description='Spot set type `list`; List of items. Matches this set if Item is part of this list.',
    )


class Type7(Enum):
    protocol = 'protocol'


class SpotSetTypeProtocol(BaseModel):
    item_protocol: Optional[ItemProtocol] = None
    type: Optional[Type7] = Field(
        None,
        description='Spot set type `protocol`; Matches Items with the same Protocol as specified by this set.',
    )


class Type8(Enum):
    technology = 'technology'


class Type9(Enum):
    type = 'type'


class SpotSetTypeType(BaseModel):
    item_type: Optional[ItemType] = None
    type: Optional[Type9] = Field(
        None,
        description='Spot set type `type`; Matches Items with the same Type as specified by this set.',
    )


class SpotSetUpdate(BaseModel):
    delete: Optional[bool] = Field(
        None,
        description='Request to delete a set. Remove request needs to be synchronized to the device, so it may take some time before the resource is being removed.',
    )


class Technology(Enum):
    bluetooth = 'bluetooth'
    optical = 'optical'
    rfid = 'rfid'


class TimeCreated(RootModel[str]):
    root: str = Field(
        ...,
        description='[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.',
        examples=['2018-08-30T09:51:59.737Z'],
    )


class TimeEvent(RootModel[str]):
    root: str = Field(
        ...,
        description="[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this event was generated on the device. This is the device's own timestamp. Could be different due to buffering and clock differences.",
        examples=['2018-08-30T09:51:59.737Z'],
    )


class TimeExpire(RootModel[str]):
    root: str = Field(
        ...,
        description='[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource is going to be deleted.',
        examples=['2018-08-30T09:51:59.737Z'],
    )


class TimeLastAccessed(RootModel[str]):
    root: str = Field(
        ...,
        description='[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was last accessed.',
        examples=['2018-08-30T09:51:59.737Z'],
    )


class TimeMoved(RootModel[str]):
    root: str = Field(
        ...,
        description='Last time this item moved. This is the last time that the location for this item was changed.',
        examples=['2018-08-30T09:51:59.737Z'],
    )


class TimeUpdated(RootModel[str]):
    root: str = Field(
        ...,
        description='[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.',
        examples=['2018-08-30T09:51:59.737Z'],
    )


class Url(RootModel[str]):
    root: str = Field(
        ...,
        description='Url to the individual resource.',
        examples=['https://brain.intellifi.nl/api/foobar'],
    )


class User(BaseModel):
    email: Optional[str] = Field(
        None, description='Email address', examples=['user@intellifi.nl']
    )
    first_name: Optional[str] = Field(None, description='First name', examples=['Foo'])
    id: Optional[IdReadOnly] = None
    is_admin: Optional[bool] = Field(
        None, description='Whether or not this is an administrator.'
    )
    is_locked: Optional[bool] = Field(
        None,
        description="Whether or not this user is locked and can't change the password.",
    )
    last_name: Optional[str] = Field(None, description='Last name', examples=['Bar'])
    password: Optional[str] = Field(
        None, description='Password of the user', examples=['password1']
    )
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeCreated] = None
    url: Optional[Url] = None


class Version(RootModel[str]):
    root: str = Field(
        ..., description='Current running version of the resource.', examples=['1.2.3']
    )


class AuthMethod(Enum):
    user_session = 'user_session'
    internal = 'internal'
    static_api_key = 'static_api_key'


class Permissions(BaseModel):
    mutate: Optional[bool] = Field(
        None, description='Whether or not this session can mutate resources'
    )


class AuthinfoGetResponse(BaseModel):
    api_key_id: Optional[str] = Field(
        None,
        description='Reference to the static API key (/api/keys) used to authenticate this request (when auth_method=static_api_key)',
        examples=['5b7d6cbd7503c445552a1664'],
    )
    auth_method: Optional[AuthMethod] = Field(
        None, description='What kind of authentication was used'
    )
    authenticated: Optional[bool] = Field(
        None, description='Whether or not you are authenticated'
    )
    permissions: Optional[Permissions] = None
    url: Optional[Url] = None
    user_id: Optional[str] = Field(
        None,
        description='Reference to the user account (/api/users) used to authenticate this request (when auth_method=user_session)',
        examples=['5b7d6cbd7503c445552a1664'],
    )


class BlobsIdUploadPostRequest(BaseModel):
    file: Optional[bytes] = None


class Blob(BaseModel):
    blob_key: Optional[str] = Field(
        None, description='Unique key to the blob', examples=['foobar']
    )
    content_type: Optional[str] = Field(
        None,
        description='Media type of the resource. Automatically detected when not given in a POST.',
        examples=['image/png'],
    )
    download_url: Optional[Url] = None
    filename: Optional[str] = Field(
        None, description='Filename of the blob', examples=['Foo bar']
    )
    hash: Optional[str] = Field(
        None,
        description='Hash of the blob',
        examples=['50df961c6c099f778fa50647572ef21f4ef416d52f7e00e311d7dbca1a735f6a'],
    )
    id: Optional[IdReadOnly] = None
    time_created: Optional[TimeCreated] = None
    time_last_accessed: Optional[TimeLastAccessed] = None
    time_updated: Optional[TimeUpdated] = None
    upload_url: Optional[Url] = None
    url: Optional[Url] = None


class Topic(BaseModel):
    action: Optional[EventTopicAction] = None
    arguments: Optional[EventTopicArgument] = None
    resource_id: Optional[IdReadOnly] = None
    resource_type: Optional[EventTopicResourceType] = None
    resource_url: Optional[Url] = None


class Event(BaseModel):
    id: Optional[IdReadOnly] = None
    payload: Optional[Any] = Field(
        None,
        description='An object containing the payload, if any, of the event.',
        examples=[{'foo': 'bar'}],
    )
    time_created: Optional[TimeCreated] = None
    time_event: Optional[TimeEvent] = None
    time_expire: Optional[TimeExpire] = None
    topic: Optional[Topic] = None
    url: Optional[Url] = None


class GeoCoords(BaseModel):
    lat: Optional[float] = Field(None, description='Latitude angle in degrees')
    lng: Optional[float] = Field(None, description='Longitude angle in degrees')
    time_updated: Optional[TimeUpdated] = None


class GeoCoordsReadOnly(BaseModel):
    lat: Optional[float] = Field(None, description='Latitude angle in degrees')
    lng: Optional[float] = Field(None, description='Longitude angle in degrees')
    time_updated: Optional[TimeUpdated] = None


class Item3(BaseModel):
    location_url: Optional[Url] = None


class ItemList(BaseModel):
    custom: Optional[Custom] = None
    id: Optional[IdReadOnly] = None
    label: Optional[Label] = None
    list: Optional[Url] = None
    metadata: Optional[Metadata] = None
    sha1: Optional[str] = Field(
        None,
        description='The sha1 checksum of the list. This will change when the list is mutated.',
    )
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    total: Optional[int] = Field(
        None, description='Total amount of items in this set', examples=[2]
    )


class ItemUpdate(BaseModel):
    config_request: Optional[ConfigRequest] = None
    custom: Optional[Custom] = None
    label: Optional[Label] = None
    location_request: Optional[LocationRequest] = None
    metadata: Optional[Metadata] = None


class Key(BaseModel):
    id: Optional[IdReadOnly] = None
    is_read_only: Optional[bool] = Field(
        None, description='Whether or not this key can only read and not write.'
    )
    label: Optional[str] = Field(None, description='Custom label for this API key.')
    secret: Optional[str] = Field(
        None,
        description='The secret token for authentication.',
        examples=['59cb1e86-a08d-44c9-9b37-c27f4ccd97f4'],
    )
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    url: Optional[Url] = None


class KeyValuePair(KeyValuePairUpdate):
    id: Optional[IdReadOnly] = None
    kv_key: Optional[str] = Field(
        None, description='Unique identifier for the value.', examples=['foo']
    )
    kv_value: Optional[Any] = Field(
        None, description='The value of the key value pair.', examples=['all the bars']
    )
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    url: Optional[Url] = None


class Location(BaseModel):
    custom: Optional[Custom] = None
    id: Optional[IdReadOnly] = None
    label: Optional[Label] = None
    metadata: Optional[Metadata] = None
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    url: Optional[Url] = None


class Conditions(BaseModel):
    from_location: Optional[Location] = Field(
        None, description='Rule applies to moves at or away from this location.'
    )


class Conditions2(BaseModel):
    from_location_url: Optional[Url] = None


class Conditions3(BaseModel):
    to_location: Optional[Location] = Field(
        None, description='Rule applies to moves towards this location.'
    )


class Conditions5(BaseModel):
    to_location_url: Optional[Url] = None


class LocationRule(BaseModel):
    conditions: Optional[
        Union[
            Union[Conditions, Conditions1, Conditions2],
            Union[Conditions3, Conditions4, Conditions5],
        ]
    ] = Field(
        None,
        description='Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.',
    )
    enabled: Optional[RuleEnabled] = None
    id: Optional[IdReadOnly] = None
    label: Optional[Label] = None
    parameters: Optional[LocationRuleParameters] = None
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    type: Optional[LocationRuleType] = None
    url: Optional[Url] = None


class LocationRuleUpdate(BaseModel):
    conditions: Optional[Conditions6] = Field(
        None,
        description='Scope of this rule, e.g. moves at or away from a specific location or towards a specific location. The `from_location` is mandatory. The `to_location` is either mandatory, optional or not allowed depending on rule type.',
    )
    enabled: Optional[RuleEnabled] = None
    label: Optional[Label] = None
    parameters: Optional[LocationRuleParameters] = None
    type: Optional[LocationRuleType] = None


class Resource(BaseModel):
    id: Optional[IdReadOnly] = None
    url: Optional[Url] = None


class ResponseDefaultResource(BaseModel):
    resource: Optional[Resource] = None
    status: Optional[int] = Field(None, description='Status code', examples=[200])


class ResponseEnvelope(BaseModel):
    count: Optional[int] = Field(
        None,
        description='The maximum number of items in the response (as set in the query or by default).',
        examples=[293401],
    )
    count_current: Optional[int] = Field(
        None,
        description='The maximum number of items available to return.',
        examples=[100],
    )
    is_limited: Optional[bool] = Field(
        None,
        description='Becomes false when the number of results is smaller than limit.',
        examples=[True],
    )
    next_url: Optional[str] = Field(
        None,
        description='URL to the next page of items. ( null if none)',
        examples=[
            'https://brain.intellifi.nl/api/items?before_id=5b599c427503c44239cf0399'
        ],
    )
    query_duration_ms: Optional[int] = Field(
        None,
        description='Amount of time, in milliseconds, the request needed to complete.',
        examples=[42],
    )
    url: Optional[Url] = None


class Service(BaseModel):
    boot_count: Optional[BootCount] = None
    config: Optional[Config] = None
    config_request: Optional[ConfigRequest] = None
    id: Optional[IdReadOnly] = None
    name: Optional[Name] = None
    restart_request: Optional[RestartRequest] = None
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    url: Optional[Url] = None
    version: Optional[Version] = None


class AntennaReportLocation(BaseModel):
    antenna_number: Optional[int] = Field(
        None, description='Antenna number', examples=[1]
    )
    report_location: Optional[Location] = None
    report_location_id: Optional[IdReadOnly] = None
    report_location_url: Optional[Url] = None


class SpotBase(BaseModel):
    antenna_report_locations: Optional[List[AntennaReportLocation]] = Field(
        None,
        description='You may configure this field to an object which couples individual antenna ports to locations.',
    )
    config: Optional[Config] = None
    config_request: Optional[ConfigRequest] = None
    geo_coords: Optional[GeoCoords] = None
    id: Optional[IdReadOnly] = None
    is_online: Optional[IsOnline] = None
    request_counter: Optional[RequestCounter] = None
    senses: Optional[Senses] = None
    senses_request: Optional[SensesRequest] = None
    serial_number: Optional[SerialNumber] = None
    status: Optional[Any] = Field(
        None,
        description='An object with specific information about the spot, directly send by the spot itself when the connection is created.',
        examples=[{'foo': 'bar'}],
    )
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    url: Optional[Url] = None


class SpotGet1(BaseModel):
    report_location: Optional[Location] = None


class SpotGet3(BaseModel):
    report_location_url: Optional[Url] = None


SpotGet4 = SpotBase


class SpotGet5(SpotGet1, SpotGet4):
    pass


class SpotGet6(SpotGet2, SpotGet4):
    pass


class SpotGet7(SpotGet3, SpotGet4):
    pass


class SpotGet(RootModel[Union[SpotGet5, SpotGet6, SpotGet7]]):
    root: Union[SpotGet5, SpotGet6, SpotGet7]


class SpotList(BaseModel):
    custom: Optional[Custom] = None
    id: Optional[IdReadOnly] = None
    label: Optional[Label] = None
    list: Optional[Url] = None
    metadata: Optional[Metadata] = None
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    total: Optional[int] = Field(
        None, description='Total amount of spots in this set', examples=[2]
    )


class SpotSetBase(BaseModel):
    created_by: Optional[str] = Field(
        None,
        description="Who was responsible for the creation of this spot list. Value determines who's allowed to manages this object.",
    )
    id: Optional[IdReadOnly] = None
    setid: Optional[conint(ge=0, le=255)] = Field(
        None,
        description='Spot set unique identifier. Must be unique within a single device',
    )
    spot_id: Optional[IdReadOnly] = None
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None


SpotSetCreate1 = SpotSetBase


class SpotSetCreate2(SpotSetTypeAreacode, SpotSetCreate1):
    pass


class SpotSetCreate3(SpotSetTypeCodelength, SpotSetCreate1):
    pass


class SpotSetCreate4(SpotSetTypeCodemask, SpotSetCreate1):
    pass


class SpotSetCreate5(SpotSetTypeCoderange, SpotSetCreate1):
    pass


class SpotSetCreate6(SpotSetTypeExtended, SpotSetCreate1):
    pass


class SpotSetCreate7(SpotSetTypeList, SpotSetCreate1):
    pass


class SpotSetCreate8(SpotSetTypeProtocol, SpotSetCreate1):
    pass


class SpotSetCreate10(SpotSetTypeType, SpotSetCreate1):
    pass


class SpotSetTypeTechnology(BaseModel):
    item_technology: Optional[Technology] = None
    type: Optional[Type8] = Field(
        None,
        description='Spot set type `technology`; Matches Items with the same Technology as specified by this set.',
    )


class SpotUpdate(SpotBase):
    report_location: Optional[Id] = None


class Subscription(BaseModel):
    custom: Optional[Custom] = None
    database_hold_time_h: Optional[int] = Field(
        None,
        description='The number of hours this event is retained in the database. *Only use larger numbers if you know what you are doing.* A couple of hours is enough for most use cases.',
        examples=[2],
    )
    description: Optional[str] = Field(
        None,
        description='Additional field to add some notes about this subscription.',
        examples=['Item events'],
    )
    events_url: Optional[Url] = None
    id: Optional[IdReadOnly] = None
    populate_events: Optional[bool] = Field(
        None,
        description='If set to `true`, resource references in an event (e.g. the location an item moved to) are resolved and populated with data instead of giving just an ID.',
    )
    target_delivery_last_failure: Optional[Dict[str, Any]] = Field(
        None,
        description='If `target_url` is set or has been set before, and delivery to the target URL failed at least once, this contains debugging information about the nature of the most recent failure.',
    )
    target_delivery_status: Optional[Dict[str, Any]] = Field(
        None,
        description='If `target_url` is set, `target_delivery_status.ok` will be `true` or `false` depending on whether events are being succesfully delivered. `target_delivery_status.since` indicates when t his status last changed.',
    )
    target_retry: Optional[bool] = Field(
        None,
        description='Set to `true` if you want our server to retry if `target_url` is not giving back a `2xx` success code.',
    )
    target_url: Optional[str] = Field(
        None,
        description="Url to an external service that all applicable events are pushed to (webhook). Configure to `null` if you don't wish to use this (default).",
    )
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    topic_filter: Optional[str] = Field(
        None,
        description='MQTT filter that is applied to all events. Allows you to select and filter events. See [Event filtering](https://intellifi.zendesk.com/hc/en-us/articles/360008791494) for more information',
        examples=['items/#'],
    )
    url: Optional[Url] = None
    verify_target_certificate: Optional[bool] = Field(
        None,
        description='Whether or not the `target_url` endpoint TLS certificate is verified to be valid.',
    )


class BlobsGetResponse(ResponseEnvelope):
    results: Optional[List[Blob]] = None


class EventsGetResponse(ResponseEnvelope):
    results: Optional[List[Event]] = None


class KeysGetResponse(ResponseEnvelope):
    results: Optional[List[Key]] = None


class KvpairsGetResponse(ResponseEnvelope):
    results: Optional[List[KeyValuePair]] = None


class LocationrulesGetResponse(ResponseEnvelope):
    results: Optional[List[LocationRule]] = None


class LocationsGetResponse(ResponseEnvelope):
    results: Optional[List[Location]] = None


class ServicesGetResponse(ResponseEnvelope):
    results: Optional[List[Service]] = None


class SetsItemlistsGetResponse(ResponseEnvelope):
    results: Optional[List[ItemList]] = None


class SetsSpotlistsGetResponse(ResponseEnvelope):
    results: Optional[List[SpotList]] = None


class SpotsGetResponse(ResponseEnvelope):
    results: Optional[List[SpotGet]] = None


class SubscriptionsGetResponse(ResponseEnvelope):
    results: Optional[List[Subscription]] = None


class SubscriptionsIdEventsGetResponse(ResponseEnvelope):
    results: Optional[List[Event]] = None


class UsersGetResponse(ResponseEnvelope):
    results: Optional[List[User]] = None


class Item1(BaseModel):
    location: Optional[Location] = Field(
        None,
        description="Reference to the location resource where the item is located. Or, if the item is out of reach, the last known location. Only returned when populate is set to 'location'",
    )


class Item4(ItemUpdate):
    code_hex: Optional[CodeHex] = None
    geo_coords: Optional[GeoCoordsReadOnly] = None
    id: Optional[IdReadOnly] = None
    is_present: Optional[bool] = Field(
        None,
        description="Is this item actively detected in one of the zones at this moment? True when it is, false if it's not.",
        examples=[True],
    )
    move_count: Optional[MoveCount] = None
    protocol: Optional[ItemProtocol] = None
    sets: Optional[ListOfSetIds] = None
    technology: Optional[Technology] = None
    time_created: Optional[TimeCreated] = None
    time_last_present: Optional[str] = Field(
        None,
        description='Last time the item was present.',
        examples=['2018-08-30T09:51:59.737Z'],
    )
    time_moved: Optional[TimeMoved] = None
    time_updated: Optional[TimeUpdated] = None
    type: Optional[ItemType] = None
    url: Optional[Url] = None


class Item5(Item1, Item4):
    pass


class Item6(Item2, Item4):
    pass


class Item7(Item3, Item4):
    pass


class Item(RootModel[Union[Item5, Item6, Item7]]):
    root: Union[Item5, Item6, Item7]


class Presence(BaseModel):
    id: Optional[IdReadOnly] = None
    item: Optional[Item] = None
    item_id: Optional[IdReadOnly] = None
    item_url: Optional[Url] = None
    location: Optional[Location] = None
    location_id: Optional[IdReadOnly] = None
    location_url: Optional[Url] = None
    proximity: Optional[Proximity] = None
    technology: Optional[Technology] = None
    time_created: Optional[TimeCreated] = None
    time_updated: Optional[TimeUpdated] = None
    url: Optional[Url] = None


SpotSet1 = SpotSetBase


class SpotSet2(SpotSetTypeAny, SpotSet1):
    pass


class SpotSet3(SpotSetTypeAreacode, SpotSet1):
    pass


class SpotSet4(SpotSetTypeCodelength, SpotSet1):
    pass


class SpotSet5(SpotSetTypeCodemask, SpotSet1):
    pass


class SpotSet6(SpotSetTypeCoderange, SpotSet1):
    pass


class SpotSet7(SpotSetTypeExtended, SpotSet1):
    pass


class SpotSet8(SpotSetTypeList, SpotSet1):
    pass


class SpotSet9(SpotSetTypeProtocol, SpotSet1):
    pass


class SpotSet10(SpotSetTypeTechnology, SpotSet1):
    pass


class SpotSet11(SpotSetTypeType, SpotSet1):
    pass


class SpotSet(
    RootModel[
        Union[
            SpotSet2,
            SpotSet3,
            SpotSet4,
            SpotSet5,
            SpotSet6,
            SpotSet7,
            SpotSet8,
            SpotSet9,
            SpotSet10,
            SpotSet11,
        ]
    ]
):
    root: Union[
        SpotSet2,
        SpotSet3,
        SpotSet4,
        SpotSet5,
        SpotSet6,
        SpotSet7,
        SpotSet8,
        SpotSet9,
        SpotSet10,
        SpotSet11,
    ]


class SpotSetCreate9(SpotSetTypeTechnology, SpotSetCreate1):
    pass


class SpotSetCreate(
    RootModel[
        Union[
            SpotSetCreate2,
            SpotSetCreate3,
            SpotSetCreate4,
            SpotSetCreate5,
            SpotSetCreate6,
            SpotSetCreate7,
            SpotSetCreate8,
            SpotSetCreate9,
            SpotSetCreate10,
        ]
    ]
):
    root: Union[
        SpotSetCreate2,
        SpotSetCreate3,
        SpotSetCreate4,
        SpotSetCreate5,
        SpotSetCreate6,
        SpotSetCreate7,
        SpotSetCreate8,
        SpotSetCreate9,
        SpotSetCreate10,
    ]


class ItemsGetResponse(ResponseEnvelope):
    results: Optional[List[Item]] = None


class PresencesGetResponse(ResponseEnvelope):
    results: Optional[List[Presence]] = None
